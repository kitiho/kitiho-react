(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for('react.element') : 0xEAC7;

  // ReactElement
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          key,
          ref,
          props,
          type,
          __mark: 'kitiho',
      };
      return element;
  };
  const jsx = (type, config, ...maybeChildren) => {
      const props = {};
      let key = null;
      let ref = null;
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val !== undefined)
                  key = `${val}`;
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined)
                  ref = val;
              continue;
          }
          // 判断是不是config自己的prop 而不是原型的prop
          if ({}.hasOwnProperty.call(config, prop))
              props[prop] = val;
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          if (maybeChildrenLength === 1)
              props.children = maybeChildrenLength[0];
          else
              props.children = maybeChildrenLength;
      }
      return ReactElement(type, key, ref, props);
  };
  const jsxDEV = (type, config) => {
      const props = {};
      let key = null;
      let ref = null;
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val !== undefined)
                  key = `${val}`;
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined)
                  ref = val;
              continue;
          }
          // 判断是不是config自己的prop 而不是原型的prop
          if ({}.hasOwnProperty.call(config, prop))
              props[prop] = val;
      }
      return ReactElement(type, key, ref, props);
  };

  exports.ReactElement = ReactElement;
  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
